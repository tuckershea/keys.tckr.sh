name: "CI"

permissions:
  packages: write

on:
  push:
    branches:
      - main
jobs:
  build:
    strategy:
      matrix:
        target: [ociImage-amd64, ociImage-arm64]

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v25
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - uses: DeterminateSystems/magic-nix-cache-action@v2
      - uses: cachix/cachix-action@v14
        with:
          name: tuckershea
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - run: nix build .#${{ matrix.target }} -L

      - name: Prepare for artifacting
        # mitigates https://github.com/actions/upload-artifact/issues/109
        run: |
          cp -L result image.tar.gz
          gzip --decompress image.tar.gz
          
      - name: Temporarily save Docker image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: ./image.tar
          retention-days: 1

  package:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Retrieve amd64 image
        uses: actions/download-artifact@v4
        with:
          name: ociImage-amd64
          path: ./image-amd64.tar
      - run: docker load -i ./image-amd64.tar
      - run: docker tag keys:latest keys:latest-amd64

      - name: Retrieve arm64 image
        uses: actions/download-artifact@v4
        with:
          name: ociImage-arm64
          path: ./image-arm64.tar
      - run: docker load -i ./image-arm64.tar
      - run: docker tag keys:latest keys:latest-arm64

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Manifest
        run: |
          IMAGE_ID=ghcr.io/tuckershea/keys.tckr.sh
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          docker manifest create $IMAGE_ID:latest \
          --amend $IMAGE_ID:latest-amd64 \
          --amend $IMAGE_ID:latest-arm64
          docker manifest push $IMAGE_ID:latest
